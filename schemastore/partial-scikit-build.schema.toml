generate = [ [
    "union",
    { "path = { required = true }" = "string = { min-len = 1 }", "template = { required = true }" = "string = { min-len = 1 }", location = """enum = [
    "install",
    "build",
    "source",
]""" },
    { "path = { required = true }" = "string = { min-len = 1 }", "template-path = { required = true }" = "string = { min-len = 1 }", location = """enum = [
    "install",
    "build",
    "source",
]""" },
] ]
strict-config = "boolean"
experimental = "boolean"
minimum-version = "string"
build-dir = "string"
fail = "boolean"
overrides = [ { "if = { required = true }" = [
    "union",
    "ref = 'defs.if_overrides'",
    { "any = { required = true }" = "ref = 'defs.if_overrides'" },
], cmake = "ref = 'cmake'", ninja = "ref = 'ninja'", logging = "ref = 'logging'", sdist = "ref = 'sdist'", wheel = "ref = 'wheel'", backport = "ref = 'backport'", editable = "ref = 'editable'", build = "ref = 'build'", install = "ref = 'install'", generate = "ref = 'generate'", messages = "ref = 'messages'", metadata = "ref = 'metadata'", strict-config = "ref = 'strict-config'", experimental = "ref = 'experimental'", minimum-version = "ref = 'minimum-version'", build-dir = "ref = 'build-dir'", fail = "ref = 'fail'", inherit = { cmake = { args = "ref = 'defs.inherit'", define = "ref = 'defs.inherit'", targets = "ref = 'defs.inherit'" }, sdist = { include = "ref = 'defs.inherit'", exclude = "ref = 'defs.inherit'" }, wheel = { packages = "ref = 'defs.inherit'", license-files = "ref = 'defs.inherit'", exclude = "ref = 'defs.inherit'" }, build = { tool-args = "ref = 'defs.inherit'", targets = "ref = 'defs.inherit'" }, install = { components = "ref = 'defs.inherit'" } } } ]

[cmake]
minimum-version = "string"
version = "string"
args = [ "string" ]
verbose = "boolean"
build-type = "string"
source-dir = "string"
targets = [ "string" ]

[cmake.define]
"pattern = '.+'" = [
    "union",
    [
    "union",
    "string",
    "boolean",
],
    { "env = { required = true }" = "string = { min-len = 1 }", default = [
    "union",
    "string",
    "boolean",
] },
]
"*" = "any-value"

[ninja]
minimum-version = "string"
version = "string"
make-fallback = "boolean"

[logging]
level = """enum = [
    "NOTSET",
    "DEBUG",
    "INFO",
    "WARNING",
    "ERROR",
    "CRITICAL",
]"""

[sdist]
include = [ "string" ]
exclude = [ "string" ]
reproducible = "boolean"
cmake = "boolean"

[wheel]
packages = [
    "union",
    [ "string" ],
    { "pattern = '.+'" = "string", "*" = "any-value" },
]
py-api = "string"
expand-macos-universal-tags = "boolean"
install-dir = "string"
license-files = [ "string" ]
cmake = "boolean"
platlib = "boolean"
exclude = [ "string" ]
build-tag = "string"

[backport]
find-python = "string"

[editable]
mode = """enum = [
    "redirect",
    "inplace",
]"""
verbose = "boolean"
rebuild = "boolean"

[build]
tool-args = [ "string" ]
targets = [ "string" ]
verbose = "boolean"

[install]
components = [ "string" ]
strip = "boolean"

[messages]
after-failure = "string"
after-success = "string"

[metadata]
version = "ref = 'defs.metadata'"
description = "ref = 'defs.metadata'"
license = "ref = 'defs.metadata'"
readme = "ref = 'defs.metadata'"
requires-python = "ref = 'defs.metadata'"
dependencies = "ref = 'defs.metadata'"
optional-dependencies = "ref = 'defs.metadata'"
entrypoints = "ref = 'defs.metadata'"
authors = "ref = 'defs.metadata'"
maintainers = "ref = 'defs.metadata'"
urls = "ref = 'defs.metadata'"
classifiers = "ref = 'defs.metadata'"
keywords = "ref = 'defs.metadata'"
scripts = "ref = 'defs.metadata'"
gui-scripts = "ref = 'defs.metadata'"

["defs = { hidden = true }"]
inherit = """enum = [
    "none",
    "append",
    "prepend",
]"""

["defs = { hidden = true }".metadata]
provider = "string"
provider-path = "string"
"*" = "any-value"

["defs = { hidden = true }".if_overrides]
scikit-build-version = "string"
python-version = "string"
implementation-name = "string"
implementation-version = "string"
platform-system = "string"
platform-machine = "string"
platform-node = "string"
state = "string"
from-sdist = "boolean"
failed = "boolean"
system-cmake = "string"
cmake-wheel = "boolean"
abi-flags = "string"

["defs = { hidden = true }".if_overrides.env]
"pattern = '.*'" = [
    "union",
    "string",
    "boolean",
]
