extends = "string"
include = [ "string" ]
exclude = [ "string" ]
ignore = [ "string" ]
strict = [ "string" ]
typeCheckingMode = """enum = [
    "off",
    "basic",
    "standard",
    "strict",
]"""
useLibraryCodeForTypes = "boolean"
typeshedPath = "string"
stubPath = "string"
disableBytesTypePromotions = "ref = 'defs.disableBytesTypePromotions'"
strictListInference = "ref = 'defs.strictListInference'"
strictSetInference = "ref = 'defs.strictSetInference'"
strictDictionaryInference = "ref = 'defs.strictDictionaryInference'"
analyzeUnannotatedFunctions = "ref = 'defs.analyzeUnannotatedFunctions'"
strictParameterNoneValue = "ref = 'defs.strictParameterNoneValue'"
enableExperimentalFeatures = "ref = 'defs.enableExperimentalFeatures'"
enableTypeIgnoreComments = "ref = 'defs.enableTypeIgnoreComments'"
enableReachabilityAnalysis = "ref = 'defs.enableReachabilityAnalysis'"
deprecateTypingAliases = "ref = 'defs.deprecateTypingAliases'"
reportGeneralTypeIssues = "ref = 'defs.reportGeneralTypeIssues'"
reportPropertyTypeMismatch = "ref = 'defs.reportPropertyTypeMismatch'"
reportFunctionMemberAccess = "ref = 'defs.reportFunctionMemberAccess'"
reportMissingImports = "ref = 'defs.reportMissingImports'"
reportMissingModuleSource = "ref = 'defs.reportMissingModuleSource'"
reportInvalidTypeForm = "ref = 'defs.reportInvalidTypeForm'"
reportMissingTypeStubs = "ref = 'defs.reportMissingTypeStubs'"
reportImportCycles = "ref = 'defs.reportImportCycles'"
reportUnusedImport = "ref = 'defs.reportUnusedImport'"
reportUnusedClass = "ref = 'defs.reportUnusedClass'"
reportUnusedFunction = "ref = 'defs.reportUnusedFunction'"
reportUnusedVariable = "ref = 'defs.reportUnusedVariable'"
reportDuplicateImport = "ref = 'defs.reportDuplicateImport'"
reportWildcardImportFromLibrary = "ref = 'defs.reportWildcardImportFromLibrary'"
reportAbstractUsage = "ref = 'defs.reportAbstractUsage'"
reportArgumentType = "ref = 'defs.reportArgumentType'"
reportAssertTypeFailure = "ref = 'defs.reportAssertTypeFailure'"
reportAssignmentType = "ref = 'defs.reportAssignmentType'"
reportAttributeAccessIssue = "ref = 'defs.reportAttributeAccessIssue'"
reportCallIssue = "ref = 'defs.reportCallIssue'"
reportInconsistentOverload = "ref = 'defs.reportInconsistentOverload'"
reportIndexIssue = "ref = 'defs.reportIndexIssue'"
reportInvalidTypeArguments = "ref = 'defs.reportInvalidTypeArguments'"
reportNoOverloadImplementation = "ref = 'defs.reportNoOverloadImplementation'"
reportOperatorIssue = "ref = 'defs.reportOperatorIssue'"
reportOptionalSubscript = "ref = 'defs.reportOptionalSubscript'"
reportOptionalMemberAccess = "ref = 'defs.reportOptionalMemberAccess'"
reportOptionalCall = "ref = 'defs.reportOptionalCall'"
reportOptionalIterable = "ref = 'defs.reportOptionalIterable'"
reportOptionalContextManager = "ref = 'defs.reportOptionalContextManager'"
reportOptionalOperand = "ref = 'defs.reportOptionalOperand'"
reportRedeclaration = "ref = 'defs.reportRedeclaration'"
reportReturnType = "ref = 'defs.reportReturnType'"
reportTypedDictNotRequiredAccess = "ref = 'defs.reportTypedDictNotRequiredAccess'"
reportUntypedFunctionDecorator = "ref = 'defs.reportUntypedFunctionDecorator'"
reportUntypedClassDecorator = "ref = 'defs.reportUntypedClassDecorator'"
reportUntypedBaseClass = "ref = 'defs.reportUntypedBaseClass'"
reportUntypedNamedTuple = "ref = 'defs.reportUntypedNamedTuple'"
reportPrivateUsage = "ref = 'defs.reportPrivateUsage'"
reportTypeCommentUsage = "ref = 'defs.reportTypeCommentUsage'"
reportPrivateImportUsage = "ref = 'defs.reportPrivateImportUsage'"
reportConstantRedefinition = "ref = 'defs.reportConstantRedefinition'"
reportDeprecated = "ref = 'defs.reportDeprecated'"
reportIncompatibleMethodOverride = "ref = 'defs.reportIncompatibleMethodOverride'"
reportIncompatibleVariableOverride = "ref = 'defs.reportIncompatibleVariableOverride'"
reportInconsistentConstructor = "ref = 'defs.reportInconsistentConstructor'"
reportOverlappingOverload = "ref = 'defs.reportOverlappingOverload'"
reportPossiblyUnboundVariable = "ref = 'defs.reportPossiblyUnboundVariable'"
reportMissingSuperCall = "ref = 'defs.reportMissingSuperCall'"
reportUninitializedInstanceVariable = "ref = 'defs.reportUninitializedInstanceVariable'"
reportInvalidStringEscapeSequence = "ref = 'defs.reportInvalidStringEscapeSequence'"
reportUnknownParameterType = "ref = 'defs.reportUnknownParameterType'"
reportUnknownArgumentType = "ref = 'defs.reportUnknownArgumentType'"
reportUnknownLambdaType = "ref = 'defs.reportUnknownLambdaType'"
reportUnknownVariableType = "ref = 'defs.reportUnknownVariableType'"
reportUnknownMemberType = "ref = 'defs.reportUnknownMemberType'"
reportMissingParameterType = "ref = 'defs.reportMissingParameterType'"
reportMissingTypeArgument = "ref = 'defs.reportMissingTypeArgument'"
reportInvalidTypeVarUse = "ref = 'defs.reportInvalidTypeVarUse'"
reportCallInDefaultInitializer = "ref = 'defs.reportCallInDefaultInitializer'"
reportUnnecessaryIsInstance = "ref = 'defs.reportUnnecessaryIsInstance'"
reportUnnecessaryCast = "ref = 'defs.reportUnnecessaryCast'"
reportUnnecessaryComparison = "ref = 'defs.reportUnnecessaryComparison'"
reportUnnecessaryContains = "ref = 'defs.reportUnnecessaryContains'"
reportAssertAlwaysTrue = "ref = 'defs.reportAssertAlwaysTrue'"
reportSelfClsParameterName = "ref = 'defs.reportSelfClsParameterName'"
reportImplicitStringConcatenation = "ref = 'defs.reportImplicitStringConcatenation'"
reportUnboundVariable = "ref = 'defs.reportUnboundVariable'"
reportUnhashable = "ref = 'defs.reportUnhashable'"
reportUndefinedVariable = "ref = 'defs.reportUndefinedVariable'"
reportInvalidStubStatement = "ref = 'defs.reportInvalidStubStatement'"
reportIncompleteStub = "ref = 'defs.reportIncompleteStub'"
reportUnsupportedDunderAll = "ref = 'defs.reportUnsupportedDunderAll'"
reportUnusedCallResult = "ref = 'defs.reportUnusedCallResult'"
reportUnusedCoroutine = "ref = 'defs.reportUnusedCoroutine'"
reportUnusedExcept = "ref = 'defs.reportUnusedExcept'"
reportUnusedExpression = "ref = 'defs.reportUnusedExpression'"
reportUnnecessaryTypeIgnoreComment = "ref = 'defs.reportUnnecessaryTypeIgnoreComment'"
reportMatchNotExhaustive = "ref = 'defs.reportMatchNotExhaustive'"
reportShadowedImports = "ref = 'defs.reportShadowedImports'"
reportImplicitOverride = "ref = 'defs.reportImplicitOverride'"
extraPaths = "ref = 'defs.extraPaths'"
pythonVersion = "ref = 'defs.pythonVersion'"
pythonPlatform = "ref = 'defs.pythonPlatform'"
venvPath = "string"
venv = "string"
verboseOutput = "boolean"
executionEnvironments = [ { "root = { required = true }" = "string", disableBytesTypePromotions = "ref = 'defs.disableBytesTypePromotions'", strictListInference = "ref = 'defs.strictListInference'", strictSetInference = "ref = 'defs.strictSetInference'", strictDictionaryInference = "ref = 'defs.strictDictionaryInference'", analyzeUnannotatedFunctions = "ref = 'defs.analyzeUnannotatedFunctions'", strictParameterNoneValue = "ref = 'defs.strictParameterNoneValue'", enableExperimentalFeatures = "ref = 'defs.enableExperimentalFeatures'", enableTypeIgnoreComments = "ref = 'defs.enableTypeIgnoreComments'", enableReachabilityAnalysis = "ref = 'defs.enableReachabilityAnalysis'", deprecateTypingAliases = "ref = 'defs.deprecateTypingAliases'", reportGeneralTypeIssues = "ref = 'defs.reportGeneralTypeIssues'", reportPropertyTypeMismatch = "ref = 'defs.reportPropertyTypeMismatch'", reportFunctionMemberAccess = "ref = 'defs.reportFunctionMemberAccess'", reportMissingImports = "ref = 'defs.reportMissingImports'", reportMissingModuleSource = "ref = 'defs.reportMissingModuleSource'", reportInvalidTypeForm = "ref = 'defs.reportInvalidTypeForm'", reportMissingTypeStubs = "ref = 'defs.reportMissingTypeStubs'", reportImportCycles = "ref = 'defs.reportImportCycles'", reportUnusedImport = "ref = 'defs.reportUnusedImport'", reportUnusedClass = "ref = 'defs.reportUnusedClass'", reportUnusedFunction = "ref = 'defs.reportUnusedFunction'", reportUnusedVariable = "ref = 'defs.reportUnusedVariable'", reportDuplicateImport = "ref = 'defs.reportDuplicateImport'", reportWildcardImportFromLibrary = "ref = 'defs.reportWildcardImportFromLibrary'", reportAbstractUsage = "ref = 'defs.reportAbstractUsage'", reportArgumentType = "ref = 'defs.reportArgumentType'", reportAssertTypeFailure = "ref = 'defs.reportAssertTypeFailure'", reportAssignmentType = "ref = 'defs.reportAssignmentType'", reportAttributeAccessIssue = "ref = 'defs.reportAttributeAccessIssue'", reportCallIssue = "ref = 'defs.reportCallIssue'", reportInconsistentOverload = "ref = 'defs.reportInconsistentOverload'", reportIndexIssue = "ref = 'defs.reportIndexIssue'", reportInvalidTypeArguments = "ref = 'defs.reportInvalidTypeArguments'", reportNoOverloadImplementation = "ref = 'defs.reportNoOverloadImplementation'", reportOperatorIssue = "ref = 'defs.reportOperatorIssue'", reportOptionalSubscript = "ref = 'defs.reportOptionalSubscript'", reportOptionalMemberAccess = "ref = 'defs.reportOptionalMemberAccess'", reportOptionalCall = "ref = 'defs.reportOptionalCall'", reportOptionalIterable = "ref = 'defs.reportOptionalIterable'", reportOptionalContextManager = "ref = 'defs.reportOptionalContextManager'", reportOptionalOperand = "ref = 'defs.reportOptionalOperand'", reportRedeclaration = "ref = 'defs.reportRedeclaration'", reportReturnType = "ref = 'defs.reportReturnType'", reportTypedDictNotRequiredAccess = "ref = 'defs.reportTypedDictNotRequiredAccess'", reportUntypedFunctionDecorator = "ref = 'defs.reportUntypedFunctionDecorator'", reportUntypedClassDecorator = "ref = 'defs.reportUntypedClassDecorator'", reportUntypedBaseClass = "ref = 'defs.reportUntypedBaseClass'", reportUntypedNamedTuple = "ref = 'defs.reportUntypedNamedTuple'", reportPrivateUsage = "ref = 'defs.reportPrivateUsage'", reportTypeCommentUsage = "ref = 'defs.reportTypeCommentUsage'", reportPrivateImportUsage = "ref = 'defs.reportPrivateImportUsage'", reportConstantRedefinition = "ref = 'defs.reportConstantRedefinition'", reportDeprecated = "ref = 'defs.reportDeprecated'", reportIncompatibleMethodOverride = "ref = 'defs.reportIncompatibleMethodOverride'", reportIncompatibleVariableOverride = "ref = 'defs.reportIncompatibleVariableOverride'", reportInconsistentConstructor = "ref = 'defs.reportInconsistentConstructor'", reportOverlappingOverload = "ref = 'defs.reportOverlappingOverload'", reportPossiblyUnboundVariable = "ref = 'defs.reportPossiblyUnboundVariable'", reportMissingSuperCall = "ref = 'defs.reportMissingSuperCall'", reportUninitializedInstanceVariable = "ref = 'defs.reportUninitializedInstanceVariable'", reportInvalidStringEscapeSequence = "ref = 'defs.reportInvalidStringEscapeSequence'", reportUnknownParameterType = "ref = 'defs.reportUnknownParameterType'", reportUnknownArgumentType = "ref = 'defs.reportUnknownArgumentType'", reportUnknownLambdaType = "ref = 'defs.reportUnknownLambdaType'", reportUnknownVariableType = "ref = 'defs.reportUnknownVariableType'", reportUnknownMemberType = "ref = 'defs.reportUnknownMemberType'", reportMissingParameterType = "ref = 'defs.reportMissingParameterType'", reportMissingTypeArgument = "ref = 'defs.reportMissingTypeArgument'", reportInvalidTypeVarUse = "ref = 'defs.reportInvalidTypeVarUse'", reportCallInDefaultInitializer = "ref = 'defs.reportCallInDefaultInitializer'", reportUnnecessaryIsInstance = "ref = 'defs.reportUnnecessaryIsInstance'", reportUnnecessaryCast = "ref = 'defs.reportUnnecessaryCast'", reportUnnecessaryComparison = "ref = 'defs.reportUnnecessaryComparison'", reportUnnecessaryContains = "ref = 'defs.reportUnnecessaryContains'", reportAssertAlwaysTrue = "ref = 'defs.reportAssertAlwaysTrue'", reportSelfClsParameterName = "ref = 'defs.reportSelfClsParameterName'", reportImplicitStringConcatenation = "ref = 'defs.reportImplicitStringConcatenation'", reportUnboundVariable = "ref = 'defs.reportUnboundVariable'", reportUnhashable = "ref = 'defs.reportUnhashable'", reportUndefinedVariable = "ref = 'defs.reportUndefinedVariable'", reportInvalidStubStatement = "ref = 'defs.reportInvalidStubStatement'", reportIncompleteStub = "ref = 'defs.reportIncompleteStub'", reportUnsupportedDunderAll = "ref = 'defs.reportUnsupportedDunderAll'", reportUnusedCallResult = "ref = 'defs.reportUnusedCallResult'", reportUnusedCoroutine = "ref = 'defs.reportUnusedCoroutine'", reportUnusedExcept = "ref = 'defs.reportUnusedExcept'", reportUnusedExpression = "ref = 'defs.reportUnusedExpression'", reportUnnecessaryTypeIgnoreComment = "ref = 'defs.reportUnnecessaryTypeIgnoreComment'", reportMatchNotExhaustive = "ref = 'defs.reportMatchNotExhaustive'", reportShadowedImports = "ref = 'defs.reportShadowedImports'", reportImplicitOverride = "ref = 'defs.reportImplicitOverride'", extraPaths = "ref = 'defs.extraPaths'", pythonVersion = "ref = 'defs.pythonVersion'", pythonPlatform = "ref = 'defs.pythonPlatform'", "*" = "any-value" } ]
"*" = "any-value"

[defineConstant]
"*" = [ "union", "string", "boolean" ]

["defs = { hidden = true }"]
diagnostic = """enum = [
    "none",
    "information",
    "warning",
    "error",
    "True",
    "False",
]"""
extraPaths = [ "string" ]
pythonVersion = """
    pattern = '^3\\.[0-9]+$'
"""
pythonPlatform = """enum = [
    "Windows",
    "Darwin",
    "Linux",
    "All",
]"""
disableBytesTypePromotions = "boolean"
strictListInference = "boolean"
strictSetInference = "boolean"
strictDictionaryInference = "boolean"
analyzeUnannotatedFunctions = "boolean"
strictParameterNoneValue = "boolean"
enableExperimentalFeatures = "boolean"
enableTypeIgnoreComments = "boolean"
enableReachabilityAnalysis = "boolean"
deprecateTypingAliases = "boolean"
reportGeneralTypeIssues = "ref = 'defs.diagnostic'"
reportPropertyTypeMismatch = "ref = 'defs.diagnostic'"
reportFunctionMemberAccess = "ref = 'defs.diagnostic'"
reportMissingImports = "ref = 'defs.diagnostic'"
reportMissingModuleSource = "ref = 'defs.diagnostic'"
reportInvalidTypeForm = "ref = 'defs.diagnostic'"
reportMissingTypeStubs = "ref = 'defs.diagnostic'"
reportImportCycles = "ref = 'defs.diagnostic'"
reportUnusedImport = "ref = 'defs.diagnostic'"
reportUnusedClass = "ref = 'defs.diagnostic'"
reportUnusedFunction = "ref = 'defs.diagnostic'"
reportUnusedVariable = "ref = 'defs.diagnostic'"
reportDuplicateImport = "ref = 'defs.diagnostic'"
reportWildcardImportFromLibrary = "ref = 'defs.diagnostic'"
reportAbstractUsage = "ref = 'defs.diagnostic'"
reportArgumentType = "ref = 'defs.diagnostic'"
reportAssertTypeFailure = "ref = 'defs.diagnostic'"
reportAssignmentType = "ref = 'defs.diagnostic'"
reportAttributeAccessIssue = "ref = 'defs.diagnostic'"
reportCallIssue = "ref = 'defs.diagnostic'"
reportInconsistentOverload = "ref = 'defs.diagnostic'"
reportIndexIssue = "ref = 'defs.diagnostic'"
reportInvalidTypeArguments = "ref = 'defs.diagnostic'"
reportNoOverloadImplementation = "ref = 'defs.diagnostic'"
reportOperatorIssue = "ref = 'defs.diagnostic'"
reportOptionalSubscript = "ref = 'defs.diagnostic'"
reportOptionalMemberAccess = "ref = 'defs.diagnostic'"
reportOptionalCall = "ref = 'defs.diagnostic'"
reportOptionalIterable = "ref = 'defs.diagnostic'"
reportOptionalContextManager = "ref = 'defs.diagnostic'"
reportOptionalOperand = "ref = 'defs.diagnostic'"
reportRedeclaration = "ref = 'defs.diagnostic'"
reportReturnType = "ref = 'defs.diagnostic'"
reportTypedDictNotRequiredAccess = "ref = 'defs.diagnostic'"
reportUntypedFunctionDecorator = "ref = 'defs.diagnostic'"
reportUntypedClassDecorator = "ref = 'defs.diagnostic'"
reportUntypedBaseClass = "ref = 'defs.diagnostic'"
reportUntypedNamedTuple = "ref = 'defs.diagnostic'"
reportPrivateUsage = "ref = 'defs.diagnostic'"
reportTypeCommentUsage = "ref = 'defs.diagnostic'"
reportPrivateImportUsage = "ref = 'defs.diagnostic'"
reportConstantRedefinition = "ref = 'defs.diagnostic'"
reportDeprecated = "ref = 'defs.diagnostic'"
reportIncompatibleMethodOverride = "ref = 'defs.diagnostic'"
reportIncompatibleVariableOverride = "ref = 'defs.diagnostic'"
reportInconsistentConstructor = "ref = 'defs.diagnostic'"
reportOverlappingOverload = "ref = 'defs.diagnostic'"
reportPossiblyUnboundVariable = "ref = 'defs.diagnostic'"
reportMissingSuperCall = "ref = 'defs.diagnostic'"
reportUninitializedInstanceVariable = "ref = 'defs.diagnostic'"
reportInvalidStringEscapeSequence = "ref = 'defs.diagnostic'"
reportUnknownParameterType = "ref = 'defs.diagnostic'"
reportUnknownArgumentType = "ref = 'defs.diagnostic'"
reportUnknownLambdaType = "ref = 'defs.diagnostic'"
reportUnknownVariableType = "ref = 'defs.diagnostic'"
reportUnknownMemberType = "ref = 'defs.diagnostic'"
reportMissingParameterType = "ref = 'defs.diagnostic'"
reportMissingTypeArgument = "ref = 'defs.diagnostic'"
reportInvalidTypeVarUse = "ref = 'defs.diagnostic'"
reportCallInDefaultInitializer = "ref = 'defs.diagnostic'"
reportUnnecessaryIsInstance = "ref = 'defs.diagnostic'"
reportUnnecessaryCast = "ref = 'defs.diagnostic'"
reportUnnecessaryComparison = "ref = 'defs.diagnostic'"
reportUnnecessaryContains = "ref = 'defs.diagnostic'"
reportAssertAlwaysTrue = "ref = 'defs.diagnostic'"
reportSelfClsParameterName = "ref = 'defs.diagnostic'"
reportImplicitStringConcatenation = "ref = 'defs.diagnostic'"
reportUnboundVariable = "ref = 'defs.diagnostic'"
reportUnhashable = "ref = 'defs.diagnostic'"
reportUndefinedVariable = "ref = 'defs.diagnostic'"
reportInvalidStubStatement = "ref = 'defs.diagnostic'"
reportIncompleteStub = "ref = 'defs.diagnostic'"
reportUnsupportedDunderAll = "ref = 'defs.diagnostic'"
reportUnusedCallResult = "ref = 'defs.diagnostic'"
reportUnusedCoroutine = "ref = 'defs.diagnostic'"
reportUnusedExcept = "ref = 'defs.diagnostic'"
reportUnusedExpression = "ref = 'defs.diagnostic'"
reportUnnecessaryTypeIgnoreComment = "ref = 'defs.diagnostic'"
reportMatchNotExhaustive = "ref = 'defs.diagnostic'"
reportShadowedImports = "ref = 'defs.diagnostic'"
reportImplicitOverride = "ref = 'defs.diagnostic'"
