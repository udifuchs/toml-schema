build-system = "ref = 'defs.BuildSystem'"

[project]
"name = { required = true }" = """
    pattern = '^([a-zA-Z\\d]|[a-zA-Z\\d][\\w.-]*[a-zA-Z\\d])$'
"""
version = """
    pattern = '^v?((([0-9]+)!)?([0-9]+(\\.[0-9]+)*)([-_\\.]?(alpha|a|beta|b|preview|pre|c|rc)[-_\\.]?([0-9]+)?)?((-([0-9]+))|([-_\\.]?(post|rev|r)[-_\\.]?([0-9]+)?))?([-_\\.]?(dev)[-_\\.]?([0-9]+)?)?)(\\+([a-z0-9]+([-_\\.][a-z0-9]+)*))?$'
"""
description = "string"
readme = { "union = 'one'" = [
    "string",
    { "file = { required = true }" = "string", content-type = "string" },
    { "text = { required = true }" = "string", content-type = "string" },
    { "content-type = { required = true }" = "string" },
] }
requires-python = "string"
license = { "union = 'one'" = [
    { "file = { required = true }" = "string" },
    { "text = { required = true }" = "string" },
    "string",
] }
license-files = [ "string" ]
authors = [ "ref = 'defs.projectAuthor'" ]
maintainers = [ "ref = 'defs.projectAuthor'" ]
keywords = [ "string" ]
classifiers = [ "string" ]
dependencies = [ "string" ]
dynamic = [ """enum = [
    "version",
    "description",
    "readme",
    "requires-python",
    "license",
    "license-files",
    "authors",
    "maintainers",
    "keywords",
    "classifiers",
    "urls",
    "scripts",
    "gui-scripts",
    "entry-points",
    "dependencies",
    "optional-dependencies",
]""" ]

[project.urls]
"*" = "ref = 'format.uri'"

[project.scripts]
"*" = "string"

[project.gui-scripts]
"*" = "string"

[project.entry-points]

[project.entry-points."pattern = '^\\w+(\\.\\w+)*$'"]
"*" = "string"

[project.optional-dependencies]
"pattern = '^([a-z\\d]|[a-z\\d]([a-z\\d-](?!--))*[a-z\\d])$'" = [ "string" ]
"*" = "any-value"

[dependency-groups]
"pattern = '^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9])$'" = [ { union = [
    "string",
    { include-group = """
    pattern = '^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9._-]*[a-zA-Z0-9])$'
""" },
] } ]

[tool]
black = "file = 'partial-black.schema.toml'"
cibuildwheel = "file = 'partial-cibuildwheel.schema.toml'"
mypy = "file = 'partial-mypy.schema.toml'"
ruff = "file = 'ruff.schema.toml'"
hatch = "file = 'hatch.schema.toml'"
maturin = "file = 'maturin.schema.toml'"
scikit-build = "file = 'partial-scikit-build.schema.toml'"
setuptools = "file = 'partial-setuptools.schema.toml'"
setuptools_scm = "file = 'partial-setuptools-scm.schema.toml'"
poe = "file = 'partial-poe.schema.toml'"
poetry = "file = 'partial-poetry.schema.toml'"
pdm = "file = 'partial-pdm.schema.toml'"
pyright = "file = 'partial-pyright.schema.toml'"
pytest = "file = 'partial-pytest.schema.toml'"
repo-review = "file = 'partial-repo-review.schema.toml'"
taskipy = "file = 'partial-taskipy.schema.toml'"
tombi = "file = 'tombi.schema.toml'"
tox = "file = 'partial-tox.schema.toml'"
uv = "file = 'uv.schema.toml'"

[tool."*"]
"*" = "any-value"

["defs = { hidden = true }"]

["defs = { hidden = true }".projectAuthor]
name = "string"
email = "ref = 'format.email'"

["defs = { hidden = true }".BuildSystem]
"requires = { required = true }" = [ "string" ]
build-backend = "string"
backend-path = [ "string" ]

["format = { hidden = true }"]

uri = "pattern = '^\\w+:(\\/?\\/?)[^\\s]+\\Z'"

email = "pattern = '^(?!.*\\.\\..*@)[^@.][^@]*(?<!\\.)@[^@]+\\.[^@]+\\Z'"
